// Code generated by MockGen. DO NOT EDIT.
// Source: internal/api/openlibrary/contract.go

// Package mockapi is a generated GoMock package.
package mockapi

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	openlibrary "github.com/wilgun/joy-technologies-be/internal/api/openlibrary"
)

// MockContract is a mock of Contract interface.
type MockContract struct {
	ctrl     *gomock.Controller
	recorder *MockContractMockRecorder
}

// MockContractMockRecorder is the mock recorder for MockContract.
type MockContractMockRecorder struct {
	mock *MockContract
}

// NewMockContract creates a new mock instance.
func NewMockContract(ctrl *gomock.Controller) *MockContract {
	mock := &MockContract{ctrl: ctrl}
	mock.recorder = &MockContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContract) EXPECT() *MockContractMockRecorder {
	return m.recorder
}

// GetBooksBySubject mocks base method.
func (m *MockContract) GetBooksBySubject(ctx context.Context, req openlibrary.UserGetBookRequest) (openlibrary.UserGetBookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooksBySubject", ctx, req)
	ret0, _ := ret[0].(openlibrary.UserGetBookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooksBySubject indicates an expected call of GetBooksBySubject.
func (mr *MockContractMockRecorder) GetBooksBySubject(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooksBySubject", reflect.TypeOf((*MockContract)(nil).GetBooksBySubject), ctx, req)
}
