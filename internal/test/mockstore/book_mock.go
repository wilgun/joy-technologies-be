// Code generated by MockGen. DO NOT EDIT.
// Source: internal/store/book.go

// Package mockstore is a generated GoMock package.
package mockstore

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	model "github.com/wilgun/joy-technologies-be/internal/model"
)

// MockBookStore is a mock of BookStore interface.
type MockBookStore struct {
	ctrl     *gomock.Controller
	recorder *MockBookStoreMockRecorder
}

// MockBookStoreMockRecorder is the mock recorder for MockBookStore.
type MockBookStoreMockRecorder struct {
	mock *MockBookStore
}

// NewMockBookStore creates a new mock instance.
func NewMockBookStore(ctrl *gomock.Controller) *MockBookStore {
	mock := &MockBookStore{ctrl: ctrl}
	mock.recorder = &MockBookStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookStore) EXPECT() *MockBookStoreMockRecorder {
	return m.recorder
}

// CheckManyUserAtTimeRange mocks base method.
func (m *MockBookStore) CheckManyUserAtTimeRange(key string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckManyUserAtTimeRange", key)
	ret0, _ := ret[0].(int)
	return ret0
}

// CheckManyUserAtTimeRange indicates an expected call of CheckManyUserAtTimeRange.
func (mr *MockBookStoreMockRecorder) CheckManyUserAtTimeRange(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckManyUserAtTimeRange", reflect.TypeOf((*MockBookStore)(nil).CheckManyUserAtTimeRange), key)
}

// GetListBorrowedBook mocks base method.
func (m *MockBookStore) GetListBorrowedBook() map[string]model.UserBorrowBook {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBorrowedBook")
	ret0, _ := ret[0].(map[string]model.UserBorrowBook)
	return ret0
}

// GetListBorrowedBook indicates an expected call of GetListBorrowedBook.
func (mr *MockBookStoreMockRecorder) GetListBorrowedBook() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBorrowedBook", reflect.TypeOf((*MockBookStore)(nil).GetListBorrowedBook))
}

// GetListBorrowedBooksSchedule mocks base method.
func (m *MockBookStore) GetListBorrowedBooksSchedule() map[string]model.ScheduleBook {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBorrowedBooksSchedule")
	ret0, _ := ret[0].(map[string]model.ScheduleBook)
	return ret0
}

// GetListBorrowedBooksSchedule indicates an expected call of GetListBorrowedBooksSchedule.
func (mr *MockBookStoreMockRecorder) GetListBorrowedBooksSchedule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBorrowedBooksSchedule", reflect.TypeOf((*MockBookStore)(nil).GetListBorrowedBooksSchedule))
}

// IsBookBorrowed mocks base method.
func (m *MockBookStore) IsBookBorrowed(bookId string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBookBorrowed", bookId)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBookBorrowed indicates an expected call of IsBookBorrowed.
func (mr *MockBookStoreMockRecorder) IsBookBorrowed(bookId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBookBorrowed", reflect.TypeOf((*MockBookStore)(nil).IsBookBorrowed), bookId)
}

// SubmitBorrowBook mocks base method.
func (m *MockBookStore) SubmitBorrowBook(book model.UserBorrowBook) model.UserBorrowBook {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitBorrowBook", book)
	ret0, _ := ret[0].(model.UserBorrowBook)
	return ret0
}

// SubmitBorrowBook indicates an expected call of SubmitBorrowBook.
func (mr *MockBookStoreMockRecorder) SubmitBorrowBook(book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitBorrowBook", reflect.TypeOf((*MockBookStore)(nil).SubmitBorrowBook), book)
}

// SubmitScheduleBook mocks base method.
func (m *MockBookStore) SubmitScheduleBook(bookTime time.Time) model.ScheduleBook {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitScheduleBook", bookTime)
	ret0, _ := ret[0].(model.ScheduleBook)
	return ret0
}

// SubmitScheduleBook indicates an expected call of SubmitScheduleBook.
func (mr *MockBookStoreMockRecorder) SubmitScheduleBook(bookTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitScheduleBook", reflect.TypeOf((*MockBookStore)(nil).SubmitScheduleBook), bookTime)
}

// UserBorrowBook mocks base method.
func (m *MockBookStore) UserBorrowBook(userId int64) model.UserBorrowBook {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserBorrowBook", userId)
	ret0, _ := ret[0].(model.UserBorrowBook)
	return ret0
}

// UserBorrowBook indicates an expected call of UserBorrowBook.
func (mr *MockBookStoreMockRecorder) UserBorrowBook(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserBorrowBook", reflect.TypeOf((*MockBookStore)(nil).UserBorrowBook), userId)
}
